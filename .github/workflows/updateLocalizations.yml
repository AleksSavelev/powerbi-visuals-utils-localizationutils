on: push

jobs:
  update_translations:
    runs-on: ubuntu-latest
    env: 
      LOC_BOT_NAME: "pbcvloc"
      LOC_BOT_EMAIL: "pbcvloc@microsoft.com"
      LOC_BOT_TOKEN: ${{secrets.LOC_TOKEN}}
      APPROVE_BOT_NAME: "pbcvloc2"
      APPROVE_BOT_EMAIL: "pbcvloc2@microsoft.com"
      BRANCH_NAME: "new-translations"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          persist-credentials: false
          token: ${{ secrets.LOC_TOKEN }}
      - name: Set Loc bot config details
        run: |
          git config --global user.name $LOC_BOT_NAME
          git config --global user.email $LOC_BOT_EMAIL
          git config --global core.ignorecase true
          git config --global core.autocrlf false
      - uses: crazy-max/ghaction-import-gpg@v4
        id: import-gpg
        with:
          gpg_private_key: ${{ secrets.GPG_TOKEN }}
          passphrase: ${{ secrets.PASS_PHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Update submodules
        run: |
          git pull --recurse-submodules
          git submodule update --init --recursive --remote
      - name: Update remote links
        run: |
          mainFolder=$PWD
          git remote remove origin
          git remote add origin "https://$LOC_BOT_NAME:$LOC_BOT_TOKEN@github.com/microsoft/powerbi-visuals-utils-localizationutils.git"
          for folder in visuals/*; do
            repoName=$(echo $folder| cut -d'/' -f 2)
            cd "$mainFolder/$folder"
            git remote remove origin
            git remote add origin https://$LOC_BOT_NAME:$LOC_BOT_TOKEN@github.com/microsoft/$repoName.git
            git fetch
            echo "Remote for $repoName updated"
            git checkout $BRANCH_NAME || git checkout -b $BRANCH_NAME
          done;
          cd "$mainFolder"
          git add . && git commit -S -m "New translation" >/dev/null && git push || echo "No submodule updates"
      - name: Copy EN translation
        run: |
          for file in ./visuals/*/stringResources/en-US/resources.resjson; do 
            substring="visuals/"
            location="${file/$substring/localizations/}"
            substring="/stringresources"
            newLocation="${location/$substring//stringResources}"
            cp $file $newLocation;
          done;
      - name: Commit and push EN translation
        run:
          git add . && git commit -S -m "New translation" >/dev/null && git push || echo "No changes to commit"
      - name: Copy translations
        run: |
          for file in ./visuals/*/stringResources/*/resources.resjson; do 
            if [[ $file == *"/en-US/"* ]]; then 
              continue
            fi
            substring="visuals/"
            location="${file/$substring/localizations/}"
            cp $location $file;
          done;
      - name: Commit and push new changes to repos
        run: |
          mainFolder=$PWD
          for folder in visuals/*; do
            repoName=$(echo $folder| cut -d'/' -f 2)
            cd "$mainFolder/$folder"
            defaultBranchName=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
            git add . && git commit -S -m "New translations" >/dev/null && \
              (git push origin $BRANCH_NAME || git push --set-upstream origin $BRANCH_NAME) &&
              gh pr create -B "$defaultBranchName" -b "Auto created Pull Request with new translations" -t "New translations" || \
              echo "No changes for $repoName"
          done;
        env:
          GITHUB_TOKEN: ${{ secrets.LOC_TOKEN }}
      - name: Set approve bot config details
        run: |
          git config --global user.name $APPROVE_BOT_NAME
          git config --global user.email $APPROVE_BOT_EMAIL
      - name: Approve pull requests
        run: |
          mainFolder=$PWD
          for folder in visuals/*; do
            repoName=$(echo $folder| cut -d'/' -f 2)
            cd "$mainFolder/$folder"
            echo "$repoName"
            echo $(gh search prs --base="new-translations" --json isPullRequest,number,state)
            isPullRequest=$(gh search prs --author=@me --state=open --json isPullRequest,number)
            echo "$isPullRequest"
            if [[ $isPullRequest == "[]" ]]; then
              echo "No pull request for $repoName"
              continue
            fi
            empty_changes='{"additions":0,"deletions":0}'
            echo "$repoName"
            changes=$(gh pr view --json additions,deletions)
            if [[ $changes == $empty_changes ]]; then
              echo "No changes for $repoName"
              continue
            fi
            gh pr review --approve
            echo "Pull request to $repoName was approved"
          done;
        env:
          GITHUB_TOKEN: ${{ secrets.APPROVE_TOKEN }}