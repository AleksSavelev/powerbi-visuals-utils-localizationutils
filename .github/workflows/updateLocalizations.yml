on: push

jobs:
  update_translations:
    runs-on: ubuntu-latest
    env:
      LOC_BOT_NAME: ${{secrets.LOC_BOT_NAME}}
      LOC_BOT_EMAIL: ${{secrets.LOC_BOT_EMAIL}}
      GH_TOKEN: ${{secrets.LOC_TOKEN}}
      BRANCH_NAME: "new-translations"
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.LOC_TOKEN}}
          submodules: recursive
          persist-credentials: true
      - name: Set Loc bot config details
        run: |
          git config --global user.name $LOC_BOT_NAME
          git config --global user.email $LOC_BOT_EMAIL
          git config --global core.ignorecase true
          git config --global core.autocrlf false
      - name: Update submodules
        run: |
          git pull --recurse-submodules
          git submodule update --init --recursive --remote
          mainFolder=$PWD
          for folder in visuals/*; do
            repoName=$(echo $folder| cut -d'/' -f 2)
            echo "::group::Configure $repoName" 
            git -C $folder config remote.origin.fetch +refs/heads/*:refs/remotes/origin/* 
              cd "$mainFolder/$folder"
              git checkout $BRANCH_NAME || git checkout -b $BRANCH_NAME
            echo "::endgroup::"
            cd $mainFolder
          done;
      - name: Copy EN translation
        run: |
          for file in ./visuals/*/stringResources/en-US/resources.resjson; do 
            substring="visuals/"
            location="${file/$substring/localizations/}"
            substring="/stringresources"
            newLocation="${location/$substring//stringResources}"
            cp $file $newLocation;
          done;
      - name: Commit and push changes
        run: git add . && git commit -S -m "New translation" && git push || echo "No changes to commit"
      - name: Copy translations to submodules
        run: |
          for file in ./visuals/*/stringResources/*/resources.resjson; do 
            if [[ $file == *"/en-US/"* ]]; then 
              continue
            fi
            substring="visuals/"
            location="${file/$substring/localizations/}"
            cp $location $file;
          done;
      - name: Commit and push new changes to submodules
        run: |
          mainFolder=$PWD
          for folder in visuals/*; do
            repoName=$(echo $folder| cut -d'/' -f 2)
            echo "::group::Commit to $repoName"  
              cd "$mainFolder/$folder"
              defaultBranchName=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
              git add . && \
                git commit -S -m "New translations" && \
                (git push origin $BRANCH_NAME || git push --set-upstream origin $BRANCH_NAME) && \
                gh pr create -B "$defaultBranchName" -b "Auto created Pull Request with new translations" -t "New translations" || \
                echo "New pull request to $repoName wasn't created"
            echo "::endgroup::"
          done;
  approve_pull_requests:
    runs-on: ubuntu-latest
    needs: update_translations
    env:
      APPROVE_BOT_NAME: ${{secrets.APPROVE_BOT_NAME}}
      APPROVE_BOT_EMAIL: ${{secrets.APPROVE_BOT_EMAIL}}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          persist-credentials: true
      - name: Set Loc bot config details
        run: |
          git config --global user.name $APPROVE_BOT_NAME
          git config --global user.email $APPROVE_BOT_EMAIL
          git config --global core.ignorecase true
      - uses: crazy-max/ghaction-import-gpg@v4
        id: import-gpg
        with:
          gpg_private_key: ${{ secrets.GPG_TOKEN }}
          passphrase: ${{ secrets.PASS_PHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Approve pull requests
        run: |
          mainFolder=$PWD
          for folder in visuals/*; do
            repoName=$(echo $folder| cut -d'/' -f 2)
            echo "::group::Approve and merge to $repoName"  
              cd "$mainFolder/$folder"
              pullRequestNumber=$(gh pr list --state=open --repo=microsoft/$repoName --head=$BRANCH_NAME --json number,author)
              echo $pullRequestNumber
              if [[ $pullRequestNumber == "[]" ]]; then
                echo "No pull request for $repoName"
                continue
              fi
              emptyChanges='{"additions":0,"deletions":0}'
              changes=$(gh pr view $BRANCH_NAME --json additions,deletions)
              if [[ $changes == $emptyChanges ]]; then
                echo "No changes for $repoName"
                continue
              fi
              gh pr review $BRANCH_NAME --approve
              echo "Pull request to $repoName was approved"
              # gh pr merge $BRANCH_NAME -s --auto
              echo "Pull request to $repoName was merged"
            echo "::endgroup::"
          done;
        env:
          GITHUB_TOKEN: ${{ secrets.APPROVE_TOKEN }}
